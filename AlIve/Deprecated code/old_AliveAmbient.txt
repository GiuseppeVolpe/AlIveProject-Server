
class AliveAmbient:
    def __init__(self, creator:AliveUser, name:str):
        self.__creator = creator
        self.__name = name
        self.__intents = set()
        self.__datasets = dict()
        self.__models = dict()
        self.__agents = dict()
        self.__train_queue = Queue(maxsize=MAX_TRAIN_QUEUE_SIZE)

    def create_examples_group(self, name):
        if (name not in self.__datasets.keys()):
            self.__datasets[name] = list()

    def add_example_to_group(self, name, example):
        if(name in self.__datasets.keys()):
            self.__datasets[name].append(example)

    def remove_example_in_group(self, name, index):
        if(name in self.__datasets.keys()):
            self.__datasets[name].pop(index)

    def delete_example_group(self, name):
        if(name in self.__datasets.keys()):
            self.__datasets.pop(name)

    def __get_examples_in_group(self, group_name, category):
        if(group_name in self.__datasets.keys()):

            if (category != EXAMPLE_TRAIN_CATEGORY and category != EXAMPLE_VALIDATION_CATEGORY and category != EXAMPLE_TEST_CATEGORY):
                return self.__datasets[group_name]
            else:
                return [example for example in self.__datasets[group_name] if example.get_category() == category]
        else:
            return []

    def get_ic_dataframe(self, eg_name, category=""):
        return self.__get_dataframe(INTENT_COLUMN_NAME, eg_name, category)

    def get_sa_dataframe(self, eg_name, category=""):
        return self.__get_dataframe(SENTIMENT_COLUMN_NAME, eg_name, category)
    
    def __get_dataframe(self, label, eg_name, category):

        if(eg_name not in self.__datasets.keys()):
            return

        df = pd.DataFrame({TEXT_COLUMN_NAME:[], label:[]})

        for example in self.__get_examples_in_group(eg_name, category):
            if isinstance(example, SentenceExample):
                if example.has_label(label):
                    df.loc[len(df)] = {TEXT_COLUMN_NAME: example.get_text(), label: example.get_target(label)}
        
        return df
    
    def import_sentence_examples(self, eg_name, df, category):

        if(eg_name not in self.__datasets.keys()):
            raise Exception("This example group doesn't exist!")
        
        if not isinstance(df, pd.DataFrame):
            try:
                df = pd.read_csv(str(df))
            except FileNotFoundError:
                raise Exception("Cannot import examples... file not found!")
        
        for i, row in df.iterrows():
            if(TEXT_COLUMN_NAME in row.keys()):
                new_example = SentenceExample(category, row[TEXT_COLUMN_NAME])
                row.pop(TEXT_COLUMN_NAME)
                for key in row.keys():
                    new_example.set_target(key, row[key])
                    if key == INTENT_COLUMN_NAME:
                        self.__intents.add(row[key])
                self.__datasets[eg_name].append(new_example)

    def add_model_to_train_queue(self, model):
        self.__train_queue.put(model)

    def start_training_models_in_queue(self):
        self.__train_queue.get()

    def train_model(self, model):
        self.__train_queue.get()
